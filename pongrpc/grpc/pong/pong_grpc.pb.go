// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pong.proto

package pong

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PongGameClient is the client API for PongGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PongGameClient interface {
	SendInput(ctx context.Context, in *PlayerInput, opts ...grpc.CallOption) (*GameUpdate, error)
	StartGameStream(ctx context.Context, in *StartGameStreamRequest, opts ...grpc.CallOption) (PongGame_StartGameStreamClient, error)
	StartNtfnStream(ctx context.Context, in *StartNtfnStreamRequest, opts ...grpc.CallOption) (PongGame_StartNtfnStreamClient, error)
	Render(ctx context.Context, in *RenderRequest, opts ...grpc.CallOption) (*RenderResponse, error)
}

type pongGameClient struct {
	cc grpc.ClientConnInterface
}

func NewPongGameClient(cc grpc.ClientConnInterface) PongGameClient {
	return &pongGameClient{cc}
}

func (c *pongGameClient) SendInput(ctx context.Context, in *PlayerInput, opts ...grpc.CallOption) (*GameUpdate, error) {
	out := new(GameUpdate)
	err := c.cc.Invoke(ctx, "/pong.PongGame/SendInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pongGameClient) StartGameStream(ctx context.Context, in *StartGameStreamRequest, opts ...grpc.CallOption) (PongGame_StartGameStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PongGame_ServiceDesc.Streams[0], "/pong.PongGame/StartGameStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pongGameStartGameStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PongGame_StartGameStreamClient interface {
	Recv() (*GameUpdateBytes, error)
	grpc.ClientStream
}

type pongGameStartGameStreamClient struct {
	grpc.ClientStream
}

func (x *pongGameStartGameStreamClient) Recv() (*GameUpdateBytes, error) {
	m := new(GameUpdateBytes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pongGameClient) StartNtfnStream(ctx context.Context, in *StartNtfnStreamRequest, opts ...grpc.CallOption) (PongGame_StartNtfnStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PongGame_ServiceDesc.Streams[1], "/pong.PongGame/StartNtfnStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &pongGameStartNtfnStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PongGame_StartNtfnStreamClient interface {
	Recv() (*NtfnStreamResponse, error)
	grpc.ClientStream
}

type pongGameStartNtfnStreamClient struct {
	grpc.ClientStream
}

func (x *pongGameStartNtfnStreamClient) Recv() (*NtfnStreamResponse, error) {
	m := new(NtfnStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pongGameClient) Render(ctx context.Context, in *RenderRequest, opts ...grpc.CallOption) (*RenderResponse, error) {
	out := new(RenderResponse)
	err := c.cc.Invoke(ctx, "/pong.PongGame/Render", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PongGameServer is the server API for PongGame service.
// All implementations must embed UnimplementedPongGameServer
// for forward compatibility
type PongGameServer interface {
	SendInput(context.Context, *PlayerInput) (*GameUpdate, error)
	StartGameStream(*StartGameStreamRequest, PongGame_StartGameStreamServer) error
	StartNtfnStream(*StartNtfnStreamRequest, PongGame_StartNtfnStreamServer) error
	Render(context.Context, *RenderRequest) (*RenderResponse, error)
	mustEmbedUnimplementedPongGameServer()
}

// UnimplementedPongGameServer must be embedded to have forward compatible implementations.
type UnimplementedPongGameServer struct {
}

func (UnimplementedPongGameServer) SendInput(context.Context, *PlayerInput) (*GameUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInput not implemented")
}
func (UnimplementedPongGameServer) StartGameStream(*StartGameStreamRequest, PongGame_StartGameStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StartGameStream not implemented")
}
func (UnimplementedPongGameServer) StartNtfnStream(*StartNtfnStreamRequest, PongGame_StartNtfnStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StartNtfnStream not implemented")
}
func (UnimplementedPongGameServer) Render(context.Context, *RenderRequest) (*RenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Render not implemented")
}
func (UnimplementedPongGameServer) mustEmbedUnimplementedPongGameServer() {}

// UnsafePongGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PongGameServer will
// result in compilation errors.
type UnsafePongGameServer interface {
	mustEmbedUnimplementedPongGameServer()
}

func RegisterPongGameServer(s grpc.ServiceRegistrar, srv PongGameServer) {
	s.RegisterService(&PongGame_ServiceDesc, srv)
}

func _PongGame_SendInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PongGameServer).SendInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pong.PongGame/SendInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PongGameServer).SendInput(ctx, req.(*PlayerInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PongGame_StartGameStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartGameStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PongGameServer).StartGameStream(m, &pongGameStartGameStreamServer{stream})
}

type PongGame_StartGameStreamServer interface {
	Send(*GameUpdateBytes) error
	grpc.ServerStream
}

type pongGameStartGameStreamServer struct {
	grpc.ServerStream
}

func (x *pongGameStartGameStreamServer) Send(m *GameUpdateBytes) error {
	return x.ServerStream.SendMsg(m)
}

func _PongGame_StartNtfnStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartNtfnStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PongGameServer).StartNtfnStream(m, &pongGameStartNtfnStreamServer{stream})
}

type PongGame_StartNtfnStreamServer interface {
	Send(*NtfnStreamResponse) error
	grpc.ServerStream
}

type pongGameStartNtfnStreamServer struct {
	grpc.ServerStream
}

func (x *pongGameStartNtfnStreamServer) Send(m *NtfnStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PongGame_Render_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PongGameServer).Render(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pong.PongGame/Render",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PongGameServer).Render(ctx, req.(*RenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PongGame_ServiceDesc is the grpc.ServiceDesc for PongGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PongGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pong.PongGame",
	HandlerType: (*PongGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendInput",
			Handler:    _PongGame_SendInput_Handler,
		},
		{
			MethodName: "Render",
			Handler:    _PongGame_Render_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartGameStream",
			Handler:       _PongGame_StartGameStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StartNtfnStream",
			Handler:       _PongGame_StartNtfnStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pong.proto",
}
