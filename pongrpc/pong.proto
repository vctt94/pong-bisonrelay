syntax = "proto3";

option go_package = "grpc/pong";

package pong;

service PongGame {
  // pong game
  rpc SendInput (PlayerInput) returns (GameUpdate) {}
  rpc StartGameStream(StartGameStreamRequest) returns (stream GameUpdateBytes);
  rpc StartNtfnStream(StartNtfnStreamRequest) returns (stream NtfnStreamResponse);
  
  // waiting room
  rpc GetWaitingRoom(WaitingRoomRequest) returns (WaitingRoomResponse);
  rpc GetWaitingRooms(WaitingRoomsRequest) returns (WaitingRoomsResponse);
  rpc CreateWaitingRoom(CreateWaitingRoomResquest) returns (CreateWaitingRoomResponse);
  rpc JoinWaitingRoom(JoinWaitingRoomRequest) returns (JoinWaitingRoomResponse);
}

message WaitingRoomsRequest {
  string room_id = 1;
}

message WaitingRoomsResponse {
  repeated WaitingRoom wr = 1;
}

message JoinWaitingRoomRequest {
  string room_id = 1;
  string client_id = 2;
}

message JoinWaitingRoomResponse {}

message CreateWaitingRoomResquest {
  string host_id = 1;
  double betAmt = 2;
}

message CreateWaitingRoomResponse {
  WaitingRoom wr = 1;
}

message WaitingRoom {
  string id = 1;
  string host_id = 2;
  repeated Player players = 3;
  double bet_amt = 4;
}

message WaitingRoomRequest {}

message Player {
  string uid = 1;
  string nick = 2;
  double betAmount = 3;
}

message WaitingRoomResponse {
  repeated Player players = 1;
}

message StartNtfnStreamRequest {
  string client_id = 1;
}

message NtfnStreamResponse {
  bool started = 1;
  string game_id = 2;
  string message = 3; // Confirmation message or additional details
  double betAmt = 4;
  int32 player_number = 5;  // Player 1 or Player 2
  // some plager id change
  string player_id = 6;
}

// SignalReadyRequest contains information about the client signaling readiness
message StartGameStreamRequest {
  string client_id = 1;
}

message GameUpdateBytes {
  bytes data = 1;
}

message PlayerInput {
  string playerId = 1;
  string input = 2; // e.g., "ArrowUp", "ArrowDown"
  int32 playerNumber = 3; // player 1 or player 2.
}

message GameUpdate {
  double gameWidth = 13;
  double gameHeight = 14;
  double p1Width = 15;
  double p1Height = 16;
  double p2Width = 17;
  double p2Height = 18;
  double ballWidth = 19;
  double ballHeight = 20;

  int32 p1Score = 21;
  int32 p2Score = 22;

  double ballX = 1;
  double ballY = 2;
  double p1X = 3;
  double p1Y = 4;
  double p2X = 5;
  double p2Y = 6;

  double p1YVelocity = 7;
  double p2YVelocity = 8;
  double ballXVelocity = 9;
  double ballYVelocity = 10;

  double fps = 11;
  double tps = 12;

  // Optional: if you want to send error messages or debug information
  string error = 23;
  bool debug = 24;
}
